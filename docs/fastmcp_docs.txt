# null Source: https://gofastmcp.com/changelog ## [v2.11.0: Auth to a Good Start](https://github.com/jlowin/fastmcp/releases/tag/v2.11.0) FastMCP 2.11 doubles down on what developers need most: speed and simplicity. This massive release delivers significant performance improvements and a dramatically better developer experience. üîê **Enterprise-Ready Authentication** brings comprehensive OAuth 2.1 support with WorkOS's AuthKit integration. The new AuthProvider interface leverages MCP's support for separate resource and authorization servers, handling API keys and remote authentication with Dynamic Client Registration. AuthKit integration means you can plug into existing enterprise identity systems without rebuilding your auth stack, setting the stage for plug-and-play auth that doesn't require users to become security experts overnight. ‚ö° The **Experimental OpenAPI Parser** delivers dramatic performance improvements through single-pass schema processing and optimized memory usage. OpenAPI integrations are now significantly faster, with cleaner, more maintainable code. *(Note: the experimental parser is disabled by default, set `FASTMCPEXPERIMENTALENABLENEWOPENAPIPARSER=1` to enable it. A message will be shown to all users on the legacy parser encouraging them to try the new one before it becomes the default.)* üß† **Context State Management** finally gives you persistent state across tool calls with a simple dict interface, while enhanced meta support lets you expose rich component metadata to clients. Combined with improved type annotations, string-based argument descriptions, and UV transport support, this release makes FastMCP feel more intuitive than ever. This release represents a TON of community contributions and sets the foundation for even more ambitious features ahead. ## What's Changed ### New Features üéâ * Introduce experimental OpenAPI parser with improved performance and maintainability by [@jlowin](https://github.com/jlowin) in [#1209](https://github.com/jlowin/fastmcp/pull/1209) * Add state dict to Context (#1118) by [@mukulmurthy](https://github.com/mukulmurthy) in [#1160](https://github.com/jlowin/fastmcp/pull/1160) * Expose FastMCP tags to clients via component `meta` dict by [@jlowin](https://github.com/jlowin) in [#1281](https://github.com/jlowin/fastmcp/pull/1281) * Add \_fastmcp meta namespace by [@jlowin](https://github.com/jlowin) in [#1290](https://github.com/jlowin/fastmcp/pull/1290) * Add TokenVerifier protocol support alongside existing OAuthProvider authentication by [@jlowin](https://github.com/jlowin) in [#1297](https://github.com/jlowin/fastmcp/pull/1297) * Add comprehensive OAuth 2.1 authentication system with WorkOS integration by [@jlowin](https://github.com/jlowin) in [#1327](https://github.com/jlowin/fastmcp/pull/1327) ### Enhancements üîß * \[üê∂\] Transform MCP Server Tools by [@strawgate](https://github.com/strawgate) in [#1132](https://github.com/jlowin/fastmcp/pull/1132) * Add --python, --project, and --with-requirements options to CLI commands by [@jlowin](https://github.com/jlowin) in [#1190](https://github.com/jlowin/fastmcp/pull/1190) * Support `fastmcp run mcp.json` by [@strawgate](https://github.com/strawgate) in [#1138](https://github.com/jlowin/fastmcp/pull/1138) * Support from **future** import annotations by [@jlowin](https://github.com/jlowin) in [#1199](https://github.com/jlowin/fastmcp/pull/1199) * Optimize OpenAPI parser performance with single-pass schema processing by [@jlowin](https://github.com/jlowin) in [#1214](https://github.com/jlowin/fastmcp/pull/1214) * Log tool name on transform validation error by [@strawgate](https://github.com/strawgate) in [#1238](https://github.com/jlowin/fastmcp/pull/1238) * Refactor `get_http_request` and `context.session_id` by [@hopeful0](https://github.com/hopeful0) in [#1242](https://github.com/jlowin/fastmcp/pull/1242) * Support creating tool argument descriptions from string annotations by [@jlowin](https://github.com/jlowin) in [#1255](https://github.com/jlowin/fastmcp/pull/1255) * feat: Add Annotations support for resources and resource templates by [@chughtapan](https://github.com/chughtapan) in [#1260](https://github.com/jlowin/fastmcp/pull/1260) * Add UV Transport by [@strawgate](https://github.com/strawgate) in [#1270](https://github.com/jlowin/fastmcp/pull/1270) * Improve OpenAPI-to-JSONSchema conversion utilities by [@jlowin](https://github.com/jlowin) in [#1283](https://github.com/jlowin/fastmcp/pull/1283) * Ensure proxy components forward meta dicts by [@jlowin](https://github.com/jlowin) in [#1281](https://github.com/jlowin/fastmcp/pull/1282) * fix: server argument passing in CLI run command by [@chughtapan](https://github.com/chughtapan) in [#1293](https://github.com/jlowin/fastmcp/pull/1293) * Add meta support to tool transformation utilities by [@jlowin](https://github.com/jlowin) in [#1295](https://github.com/jlowin/fastmcp/pull/1295) * feat: Allow Resource Metadata URL as field in OAuthProvider by [@dacamposol](https://github.com/dacamposol) in [#1287](https://github.com/jlowin/fastmcp/pull/1287) * Use a simple overwrite instead of a merge for meta by [@jlowin](https://github.com/jlowin) in [#1296](https://github.com/jlowin/fastmcp/pull/1296) * Remove unused TimedCache by [@strawgate](https://github.com/strawgate) in [#1303](https://github.com/jlowin/fastmcp/pull/1303) * refactor: standardize logging usage across OpenAPI utilities by [@chi2liu](https://github.com/chi2liu) in [#1322](https://github.com/jlowin/fastmcp/pull/1322) * perf: optimize OpenAPI parsing by reducing dict copy operations by [@chi2liu](https://github.com/chi2liu) in [#1321](https://github.com/jlowin/fastmcp/pull/1321) * Structured client-side logging by [@cjermain](https://github.com/cjermain) in [#1326](https://github.com/jlowin/fastmcp/pull/1326) ### Fixes üêû * fix: preserve def reference when referenced in allOf / oneOf / anyOf by [@algirdasci](https://github.com/algirdasci) in [#1208](https://github.com/jlowin/fastmcp/pull/1208) * fix: add type hint to custom\_route decorator by [@zzstoatzz](https://github.com/zzstoatzz) in [#1210](https://github.com/jlowin/fastmcp/pull/1210) * chore: typo by [@richardkmichael](https://github.com/richardkmichael) in [#1216](https://github.com/jlowin/fastmcp/pull/1216) * fix: handle non-string \$ref values in experimental OpenAPI parser by [@jlowin](https://github.com/jlowin) in [#1217](https://github.com/jlowin/fastmcp/pull/1217) * Skip repeated type conversion and validation in proxy client elicitation handler by [@chughtapan](https://github.com/chughtapan) in [#1222](https://github.com/jlowin/fastmcp/pull/1222) * Ensure default fields are not marked nullable by [@jlowin](https://github.com/jlowin) in [#1224](https://github.com/jlowin/fastmcp/pull/1224) * Fix stateful proxy client mixing in multi-proxies sessions by [@hopeful0](https://github.com/hopeful0) in [#1245](https://github.com/jlowin/fastmcp/pull/1245) * Fix invalid async context manager usage by [@jlowin](https://github.com/jlowin) in [#1249](https://github.com/jlowin/fastmcp/pull/1249) * fix: handle optional query parameters in FastAPI routes by [@jlowin](https://github.com/jlowin) in [#1253](https://github.com/jlowin/fastmcp/pull/1253) * Fix issue with null values in dynamic client registration response by [@jlowin](https://github.com/jlowin) in [#1262](https://github.com/jlowin/fastmcp/pull/1262) * fix: properly handle and log httpx connection errors in SSE transport by [@chi2liu](https://github.com/chi2liu) in [#1267](https://github.com/jlowin/fastmcp/pull/1267) * fix: ensure correct content-type header in SSE transport by [@chi2liu](https://github.com/chi2liu) in [#1268](https://github.com/jlowin/fastmcp/pull/1268) * fix: properly handle httpx connection errors in StreamableHttpTransport by [@chi2liu](https://github.com/chi2liu) in [#1266](https://github.com/jlowin/fastmcp/pull/1266) * fix: add error handling for malformed JSON in SSE transport by [@chi2liu](https://github.com/chi2liu) in [#1269](https://github.com/jlowin/fastmcp/pull/1269) * Fix auth meta validation by [@jlowin](https://github.com/jlowin) in [#1280](https://github.com/jlowin/fastmcp/pull/1280) * fix: preserve path when stripping prefix in proxy routes by [@jlowin](https://github.com/jlowin) in [#1284](https://github.com/jlowin/fastmcp/pull/1284) * Fix tool transformation tags logic by [@jlowin](https://github.com/jlowin) in [#1313](https://github.com/jlowin/fastmcp/pull/1313) * fix: handle case where meta namespace already exists by [@jlowin](https://github.com/jlowin) in [#1314](https://github.com/jlowin/fastmcp/pull/1314) * fix: check if \`options\` is not None before accessing its attributes by [@blueraft](https://github.com/blueraft) in [#1317](https://github.com/jlowin/fastmcp/pull/1317) * fix: correct message level field extraction in MCP JSON responses by [@chi2liu](https://github.com/chi2liu) in [#1320](https://github.com/jlowin/fastmcp/pull/1320) * fix: resolve issue with port extraction in transport logic by [@chi2liu](https://github.com/chi2liu) in [#1319](https://github.com/jlowin/fastmcp/pull/1319) * fix: handle unsupported transports in runMCPServer() with meaningful error by [@chi2liu](https://github.com/chi2liu) in [#1318](https://github.com/jlowin/fastmcp/pull/1318) * fix: enable experimental OpenAPI parser by default as opt-out rather than opt-in by [@jlowin](https://github.com/jlowin) in [#1328](https://github.com/jlowin/fastmcp/pull/1328) ### Documentation üìö * docs: improve docstrings for types module by [@jhowcrof](https://github.com/jhowcrof) in [#1192](https://github.com/jlowin/fastmcp/pull/1192) * docs: add comprehensive error handling examples by [@chi2liu](https://github.com/chi2liu) in [#1193](https://github.com/jlowin/fastmcp/pull/1193) * docs: fix typo by [@chi2liu](https://github.com/chi2liu) in [#1194](https://github.com/jlowin/fastmcp/pull/1194) * docs: improve logging documentation and examples by [@chi2liu](https://github.com/chi2liu) in [#1195](https://github.com/jlowin/fastmcp/pull/1195) * docs: improve examples for route configuration by [@chi2liu](https://github.com/chi2liu) in [#1201](https://github.com/jlowin/fastmcp/pull/1201) * docs: fix typo in README introduction by [@chi2liu](https://github.com/chi2liu) in [#1202](https://github.com/jlowin/fastmcp/pull/1202) * docs: improve authentication example with comprehensive configuration by [@chi2liu](https://github.com/chi2liu) in [#1203](https://github.com/jlowin/fastmcp/pull/1203) * docs: add comprehensive tool transformation guide by [@chi2liu](https://github.com/chi2liu) in [#1204](https://github.com/jlowin/fastmcp/pull/1204) * docs: improve server-side logging documentation with detailed examples by [@chi2liu](https://github.com/chi2liu) in [#1205](https://github.com/jlowin/fastmcp/pull/1205) * docs: document experimental OpenAPI parser feature by [@jlowin](https://github.com/jlowin) in [#1213](https://github.com/jlowin/fastmcp/pull/1213) * Update and fix docstrings in the clients module by [@jhowcrof](https://github.com/jhowcrof) in [#1215](https://github.com/jlowin/fastmcp/pull/1215) * docs: examples fixes by [@jlowin](https://github.com/jlowin) in [#1218](https://github.com/jlowin/fastmcp/pull/1218) * docs: add guide on handling streaming responses for MCP servers by [@chi2liu](https://github.com/chi2liu) in [#1219](https://github.com/jlowin/fastmcp/pull/1219) * fix docs by [@jlowin](https://github.com/jlowin) in [#1256](https://github.com/jlowin/fastmcp/pull/1256) * docs: demonstrate context state management with practical examples by [@chi2liu](https://github.com/chi2liu) in [#1277](https://github.com/jlowin/fastmcp/pull/1277) * docs: add comprehensive authentication documentation by [@jlowin](https://github.com/jlowin) in [#1298](https://github.com/jlowin/fastmcp/pull/1298) * docs: improve WebSocket transport documentation with comprehensive examples by [@chi2liu](https://github.com/chi2liu) in [#1323](https://github.com/jlowin/fastmcp/pull/1323) * docs: add comprehensive MCP Config Transport documentation by [@chi2liu](https://github.com/chi2liu) in [#1325](https://github.com/jlowin/fastmcp/pull/1325) ### Quality üß™ * chore: update black config to target python 3.9+ by [@jlowin](https://github.com/jlowin) in [#1191](https://github.com/jlowin/fastmcp/pull/1191) * chore: lint fixes by [@jlowin](https://github.com/jlowin) in [#1197](https://github.com/jlowin/fastmcp/pull/1197) * upgrade httpx to 0.28 by [@jlowin](https://github.com/jlowin) in [#1200](https://github.com/jlowin/fastmcp/pull/1200) * test: add unit tests for OpenAPI to JSONSchema conversion utilities by [@chi2liu](https://github.com/chi2liu) in [#1206](https://github.com/jlowin/fastmcp/pull/1206) * upgrade to mcp 1.1.2 by [@jlowin](https://github.com/jlowin) in [#1212](https://github.com/jlowin/fastmcp/pull/1212) * test: add unit tests for token verification functionality by [@chi2liu](https://github.com/chi2liu) in [#1220](https://github.com/jlowin/fastmcp/pull/1220) * add tests for experimental parser by [@jlowin](https://github.com/jlowin) in [#1221](https://github.com/jlowin/fastmcp/pull/1221) * test: add comprehensive unit tests for context management functionality by [@chi2liu](https://github.com/chi2liu) in [#1223](https://github.com/jlowin/fastmcp/pull/1223) * test: add unit tests for mcp config transport functionality by [@chi2liu](https://github.com/chi2liu) in [#1225](https://github.com/jlowin/fastmcp/pull/1225) * test: add unit tests for tool transformation by [@chi2liu](https://github.com/chi2liu) in [#1226](https://github.com/jlowin/fastmcp/pull/1226) * test: add unit tests for authentication functionality by [@chi2liu](https://github.com/chi2liu) in [#1227](https://github.com/jlowin/fastmcp/pull/1227) * test: add unit tests for http and sse transport functionality by [@chi2liu](https://github.com/chi2liu) in [#1228](https://github.com/jlowin/fastmcp/pull/1228) * test: add unit tests for stdio transport functionality by [@chi2liu](https://github.com/chi2liu) in [#1229](https://github.com/jlowin/fastmcp/pull/1229) * test: add unit tests for client session functionality by [@chi2liu](https://github.com/chi2liu) in [#1230](https://github.com/jlowin/fastmcp/pull/1230) * test: add unit tests for CLI run functionality by [@chi2liu](https://github.com/chi2liu) in [#1231](https://github.com/jlowin/fastmcp/pull/1231) * test: add unit tests for command auto-detection functionality by [@chi2liu](https://github.com/chi2liu) in [#1232](https://github.com/jlowin/fastmcp/pull/1232) * test: add unit tests for CLI init command functionality by [@chi2liu](https://github.com/chi2liu) in [#1233](https://github.com/jlowin/fastmcp/pull/1233) * test: add comprehensive unit tests for server routing functionality by [@chi2liu](https://github.com/chi2liu) in [#1234](https://github.com/jlowin/fastmcp/pull/1234) * upgrade to pydantic 2.10.5 by [@jlowin](https://github.com/jlowin) in [#1241](https://github.com/jlowin/fastmcp/pull/1241) * refactor: remove deprecated methods and improve API clarity by [@jlowin](https://github.com/jlowin) in [#1244](https://github.com/jlowin/fastmcp/pull/1244) * test: migrate http client test to use mock instead of subprocess by [@chi2liu](https://github.com/chi2liu) in [#1251](https://github.com/jlowin/fastmcp/pull/1251) * test: migrate stdio transport test to use mock instead of subprocess by [@chi2liu](https://github.com/chi2liu) in [#1252](https://github.com/jlowin/fastmcp/pull/1252) * chore: update dependencies by [@jlowin](https://github.com/jlowin) in [#1258](https://github.com/jlowin/fastmcp/pull/1258) * chore: version update to 2.11.0rc1 by [@jlowin](https://github.com/jlowin) in [#1272](https://github.com/jlowin/fastmcp/pull/1272) * fix: update typing import for Python 3.9 compat by [@jlowin](https://github.com/jlowin) in [#1274](https://github.com/jlowin/fastmcp/pull/1274) * chore: enable experimental parser by default in CI by [@jlowin](https://github.com/jlowin) in [#1289](https://github.com/jlowin/fastmcp/pull/1289) * chore: upgrade to MCP 1.1.3 by [@jlowin](https://github.com/jlowin) in [#1301](https://github.com/jlowin/fastmcp/pull/1301) * chore: pre-release version bump to 2.11.0rc2 by [@jlowin](https://github.com/jlowin) in [#1302](https://github.com/jlowin/fastmcp/pull/1302) * chore: bump to rc3 by [@jlowin](https://github.com/jlowin) in [#1315](https://github.com/jlowin/fastmcp/pull/1315) * chore: bump to 2.11.0 by [@jlowin](https://github.com/jlowin) in [#1329](https://github.com/jlowin/fastmcp/pull/1329) ## New Contributors * [@jhowcrof](https://github.com/jhowcrof) made their first contribution in [#1192](https://github.com/jlowin/fastmcp/pull/1192) * [@chi2liu](https://github.com/chi2liu) made their first contribution in [#1193](https://github.com/jlowin/fastmcp/pull/1193) * [@algirdasci](https://github.com/algirdasci) made their first contribution in [#1208](https://github.com/jlowin/fastmcp/pull/1208) * [@richardkmichael](https://github.com/richardkmichael) made their first contribution in [#1216](https://github.com/jlowin/fastmcp/pull/1216) * [@cjermain](https://github.com/cjermain) made their first contribution in [#1326](https://github.com/jlowin/fastmcp/pull/1326) * [@dacamposol](https://github.com/dacamposol) made their first contribution in [#1287](https://github.com/jlowin/fastmcp/pull/1287) * [@blueraft](https://github.com/blueraft) made their first contribution in [#1317](https://github.com/jlowin/fastmcp/pull/1317) **Full Changelog**: https://github.com/jlowin/fastmcp/compare/v2.10.1...v2.11.0 Source: https://gofastmcp.com \# Client Documentation \------- FastMCP provides clients that let you easily connect to any MCP-compatible server. As a complement to server functionality, FastMCP clients let you use MCP servers anywhere in Python, from command-line tools to web applications. ## Installing a client To use any FastMCP client, first install the library with your preferred package manager: \`\`\`bash pip install fastmcp \`\`\` Clients are available at \`fastmcp.Client\` and are the primary interface for any interaction with MCP-compatible servers. ## Basic Usage Regardless of the connection method, all FastMCP clients share the same intuitive interface: \`\`\`python from fastmcp import Client client = Client("/path/to/server.py") # Usage async with client: result = await client.call\_tool("greet", {"name": "Alice"}) resources = await client.list\_resources() \`\`\` The \`Client\` constructor is flexible and can automatically detect the appropriate transport based on the parameter you provide: \`\`\`python # Various initialization methods client = Client("/path/to/server.py") # Local Python script client = Client("https://api.example.com/mcp") # Remote HTTP endpoint client = Client(transport) # Explicit transport object client = Client(mcp\_config) # MCP JSON configuration \`\`\` For environment-specific server integrations, you can pass a \`FastMCP\` server instance directly: \`\`\`python mcp = FastMCP("Calculator") client = Client(mcp) \`\`\` ## Available Operations All FastMCP clients support the complete MCP specification through these primary operations: ### Core Operations \* \*\*\`ping()\`\*\* - Test server connectivity \* \*\*\`call\_tool(name, arguments=None)\`\*\* - Execute server tools \* \*\*\`list\_tools()\`\*\* - Retrieve available tools ### Resource Management \* \*\*\`list\_resources()\`\*\* - Get available resources \* \*\*\`read\_resource(uri)\`\*\* - Access resource content ### Advanced Features \* \*\*\`create\_session()\`\*\* - Establish persistent connections \* \*\*\`send\_log(level, data, logger=None)\`\*\* - Client-to-server logging \* \*\*\`list\_prompts()\`\*\* - Retrieve available prompts \* \*\*\`get\_prompt(name, arguments=None)\`\*\* - Execute prompts ## Connection Lifecycle All clients operate within async context managers that handle connection setup and cleanup automatically: \`\`\`python # Basic pattern async with client: await client.ping() result = await client.call\_tool("process", {"data": "example"}) resources = await client.list\_resources() # Connection automatically closed \`\`\` For long-running applications, you can use the same client instance for multiple operations: \`\`\`python client = Client("https://api.example.com/mcp") # Multiple connection cycles async with client: initial\_data = await client.call\_tool("initialize") async with client: # Connection can be reused processed = await client.call\_tool("process", {"data": initial\_data}) async with client: final\_result = await client.call\_tool("finalize", {"processed": processed}) \`\`\` This connection model ensures resource management is handled automatically while giving you control over when connections are established. ## Transport Types FastMCP supports multiple transport types to handle different deployment scenarios: \* \*\*Local Transports\*\* - Execute servers as subprocesses (\`StdioTransport\`) \* \*\*Remote Transports\*\* - Connect to HTTP/WebSocket services (\`StreamableHttpTransport\`, \`SSETransport\`) \* \*\*In-Memory Transports\*\* - Direct integration (\`FastMCPTransport\`) \* \*\*Configuration Transports\*\* - Multi-server setups (\`MCPConfigTransport\`) The client automatically selects the appropriate transport based on the parameter type you provide to the constructor. # Transport Documentation \------- Transports define how FastMCP clients connect to MCP servers. Each transport type is optimized for different deployment scenarios, from local development to production services. Transport selection happens automatically based on the parameter you pass to the \`Client\` constructor. ## Local Transports Local transports launch and manage MCP servers as subprocesses. This gives you complete control over the server environment and is ideal for development, testing, and standalone deployments. ### Standard STDIO Transport STDIO transport is the foundation for running local MCP servers as subprocesses, handling process lifecycle and communication: \* \*\*Class:\*\* \`StdioTransport\` \* \*\*Server compatibility:\*\* Any MCP server that accepts STDIO communication \`\`\`python from fastmcp.client.transports import StdioTransport # Basic usage transport = StdioTransport( command="python", args=\["server.py"\] ) client = Client(transport) # With environment variables transport = StdioTransport( command="python", args=\["server.py"\], env={"DEBUG": "1", "API\_KEY": "secret"} ) client = Client(transport) # Custom working directory transport = StdioTransport( command="python", args=\["server.py"\], cwd="/path/to/project" ) client = Client(transport) \`\`\` For convenience, FastMCP also provides shortcuts that automatically detect transport type: \`\`\`python # These are equivalent to StdioTransport client = Client("/path/to/server.py") client = Client(\["python", "server.py"\]) \`\`\` ### Session Persistence STDIO transports maintain sessions across multiple client contexts by default (\`keep\_alive=True\`). This improves performance by reusing the same subprocess for multiple connections, but can be controlled when you need isolation. By default, the subprocess persists between connections: \`\`\`python from fastmcp.client.transports import StdioTransport transport = StdioTransport( command="python", args=\["server.py"\] ) client = Client(transport) async def efficient\_multiple\_operations(): async with client: await client.ping() async with client: # Reuses the same subprocess await client.call\_tool("process\_data", {"file": "data.csv"}) \`\`\` For complete isolation between connections, disable session persistence: \`\`\`python transport = StdioTransport( command="python", args=\["server.py"\], keep\_alive=False ) client = Client(transport) \`\`\` Use \`keep\_alive=False\` when you need complete isolation (e.g., in test suites) or when server state could cause issues between connections. ### Specialized STDIO Transports FastMCP provides convenience transports that are thin wrappers around \`StdioTransport\` with pre-configured commands: \* \*\*\`PythonStdioTransport\`\*\* - Uses \`python\` command for \`.py\` files \* \*\*\`NodeStdioTransport\`\*\* - Uses \`node\` command for \`.js\` files \* \*\*\`UvStdioTransport\`\*\* - Uses \`uv\` for Python packages (uses \`env\_vars\` parameter) \* \*\*\`UvxStdioTransport\`\*\* - Uses \`uvx\` for Python packages (uses \`env\_vars\` parameter) \* \*\*\`NpxStdioTransport\`\*\* - Uses \`npx\` for Node packages (uses \`env\_vars\` parameter) For most use cases, instantiate \`StdioTransport\` directly with your desired command. These specialized transports are primarily useful for client inference shortcuts. ## Remote Transports Remote transports connect to MCP servers running as web services. This is a fundamentally different model from STDIO transports‚Äîinstead of your client launching and managing a server process, you connect to an already-running service that manages its own environment and lifecycle. ### Streamable HTTP TransportStreamable HTTP is the recommended transport for production deployments, providing efficient bidirectional streaming over HTTP connections. \* \*\*Class:\*\* \`StreamableHttpTransport\` \* \*\*Server compatibility:\*\* FastMCP servers running with \`mcp run --transport http\` The transport requires a URL and optionally supports custom headers for authentication and configuration: \`\`\`python from fastmcp.client.transports import StreamableHttpTransport # Basic connection transport = StreamableHttpTransport(url="https://api.example.com/mcp") client = Client(transport) # With custom headers for authentication transport = StreamableHttpTransport( url="https://api.example.com/mcp", headers={ "Authorization": "Bearer your-token-here", "X-Custom-Header": "value" } ) client = Client(transport) \`\`\` For convenience, FastMCP also provides authentication helpers: \`\`\`python from fastmcp.client.auth import BearerAuth client = Client( "https://api.example.com/mcp", auth=BearerAuth("your-token-here") ) \`\`\` ### SSE Transport (Legacy) Server-Sent Events transport is maintained for backward compatibility but is superseded by Streamable HTTP for new deployments. \* \*\*Class:\*\* \`SSETransport\` \* \*\*Server compatibility:\*\* FastMCP servers running with \`mcp run --transport sse\` SSE transport supports the same configuration options as Streamable HTTP: \`\`\`python from fastmcp.client.transports import SSETransport transport = SSETransport( url="https://api.example.com/sse", headers={"Authorization": "Bearer token"} ) client = Client(transport) \`\`\` Use Streamable HTTP for new deployments unless you have specific infrastructure requirements for SSE. ## In-Memory Transport In-memory transport connects directly to a FastMCP server instance within the same Python process. This eliminates both subprocess management and network overhead, making it ideal for testing and development. \* \*\*Class:\*\* \`FastMCPTransport\` Unlike STDIO transports, in-memory servers have full access to your Python process's environment. They share the same memory space and environment variables as your client code‚Äîno isolation or explicit environment passing required.\`\`\`python from fastmcp import FastMCP, Client import os mcp = FastMCP("TestServer") @mcp.tool def greet(name: str) -> str: prefix = os.environ.get("GREETING\_PREFIX", "Hello") return f"{prefix}, {name}!" client = Client(mcp) async with client: result = await client.call\_tool("greet", {"name": "World"}) \`\`\` ## MCP JSON Configuration TransportThis transport supports the emerging MCP JSON configuration standard for defining multiple servers: \* \*\*Class:\*\* \`MCPConfigTransport\` \`\`\`python config = { "mcpServers": { "weather": { "url": "https://weather.example.com/mcp", "transport": "http" }, "assistant": { "command": "python", "args": \["./assistant.py"\], "env": {"LOG\_LEVEL": "INFO"} } } } client = Client(config) async with client: # Tools are namespaced by server weather = await client.call\_tool("weather\_get\_forecast", {"city": "NYC"}) answer = await client.call\_tool("assistant\_ask", {"question": "What?"}) \`\`\` ### Tool Transformation with FastMCP and MCPConfig FastMCP supports basic tool transformations to be defined alongside the MCP Servers in the MCPConfig file. \`\`\`python config = { "mcpServers": { "weather": { "url": "https://weather.example.com/mcp", "transport": "http", "tools": { } # <--- This is the tool transformation section } } } \`\`\` With these transformations, you can transform (change) the name, title, description, tags, enablement, and arguments of a tool. For each argument the tool takes, you can transform (change) the name, description, default, visibility, whether it's required, and you can provide example values. In the following example, we're transforming the \`weather\_get\_forecast\` tool to only retrieve the weather for \`Miami\` and hiding the \`city\` argument from the client. \`\`\`python tool\_transformations = { "weather\_get\_forecast": { "name": "miami\_weather", "description": "Get the weather for Miami", "arguments": { "city": { "name": "city", "default": "Miami", "hide": True, } } } } config = { "mcpServers": { "weather": { "url": "https://weather.example.com/mcp", "transport": "http", "tools": tool\_transformations } } } \`\`\` #### Allowlisting and Blocklisting Tools Tools can be allowlisted or blocklisted from the client by applying \`tags\` to the tools on the server. In the following example, we're allowlisting only tools marked with the \`forecast\` tag, all other tools will be unavailable to the client. \`\`\`python tool\_transformations = { "weather\_get\_forecast": { "enabled": True, "tags": \["forecast"\] } } config = { "mcpServers": { "weather": { "url": "https://weather.example.com/mcp", "transport": "http", "tools": tool\_transformations, "include\_tags": \["forecast"\] } } } \`\`\` # Community Showcase Source: https://gofastmcp.com/community/showcase High-quality projects and examples from the FastMCP community export const YouTubeEmbed = ({videoId, title}) => { return 
<div style={{maxWidth: '100%', width: '560px', height: '315px', margin: '20px auto'}}>
  <iframe 
    width="100%" 
    height="100%" 
    src={`https://www.youtube.com/embed/${videoId}`} 
    title={title}
    frameBorder="0" 
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" 
    allowFullScreen
    style={{borderRadius: '8px'}}
  />
</div>
}
